#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Customize to your needs...

# Reminder this is in a public repo!

export ZLE_REMOVE_SUFFIX_CHARS=$' \t\n;&|'
export ZLE_SPACE_SUFFIX_CHARS=$'&|'

bindkey "^[[5~" history-beginning-search-backward
bindkey "^[[6~" history-beginning-search-forward

if [[ -f /etc/ad-release ]]; then
  # running on airserver device
  source /etc/ad-release

  # TODO: use on device helpers
  # TODO: add helpers to finish setup

  function stop-feedback() {
    systemctl stop ad-hoc-feedback 2> /dev/null
  }

  function feedback-scope() {
    feedback --clear-progress --main-title "" --sub-title ""
    stop-feedback
    systemd-run \
      --setenv="XDG_RUNTIME_DIR=/run/user/$(id --user airserver)" \
      --setenv="XDG_SESSION_TYPE=wayland" --setenv="WAYLAND_DISPLAY=wayland-1" \
      --quiet --unit="ad-hoc-feedback" feedback

    trap "stop-feedback" EXIT INT

    "$@"
  }

  function api-call() {(
    set -o err_return
    set -o no_unset
    set -o pipefail
    op="$1" # required
    arg="${2:-}" # optional
    url="https://api.airserver.com/device/${op}/$(cat /sys/class/dmi/id/product_uuid)/${arg}"
    # TODO: improve error feedback, maybe precheck if on sanctioned network
    curl --fail-with-body --silent "$url" | jq '.[]'
  )}

  function update-set-channel() {(
    set -o no_unset
    api-call setChannel "$1"
  )}

  function update-get-channel() {(
    api-call getChannel
  )}

  function _update-root-image() {(
    set -o err_return
    set -o no_unset
    set -o pipefail
    channel_id="${1:-}" # optional
    if [[ $channel_id ]]; then
      # ensure on given channel
      feedback --main-title "Getting current channel"
      current_channel="$(update-get-channel)"
      if [[ "$channel_id" == "$current_channel" ]]; then
        feedback --main-title "Already on channel $channel_id"
        echo "Already on channel $channel_id"
      else
        feedback --main-title "Switching from channel $current_channel to $channel_id... "
        echo -n "Switching from channel $current_channel to $channel_id... "
        update-set-channel "$channel_id"
      fi
    fi
    echo "Starting updater"
    # TODO: add option to force kexec updates?
    trap "systemctl stop updater-manual" INT
    time systemctl start updater-manual
    if confutil --file /run/updater_status.ini --read updateReadyRebootPending | grep -q '=true'; then
      echo "Updating finshed - New update applied - Rebooting..."
      # try kexec with reboot as fallback
      systemctl kexec 2> >(grep -v '^Boot entry does not') || systemctl reboot
    else
      echo "Updating finshed - Already up-to-date"
    fi
  )}

  function _airserver_read_config() {
    local SECTION="$1"
    local KEY="$2"
    sed -rn '/^\[/{h;d};G;s/^'"$KEY"'=(.*)\n\['"$SECTION"'\]$/\1/p' /media/data/airserver/.config/App\ Dynamic/AirServer.conf 2>/dev/null
  }

  function _airserver_read_dbus() {(
    set -o pipefail
    local SECTION="$1"
    local KEY="$2"
    busctl get-property --json=short com.appdynamic.AirServer /config/raw/${SECTION} com.appdynamic.Properties.${SECTION} ${KEY} 2>/dev/null | jq --raw-output .data
  )}

  # for older devices
  if ! type jq > /dev/null; then
     echo "jq missing disabling _airserver_read_dbus"
     function _airserver_read_dbus() {(
       exit 1 # jq not available
     )}
  fi

  function _airserver_write_dbus_string() {
    local SECTION="$1"
    local KEY="$2"
    local STRING="$3"
    busctl set-property com.appdynamic.AirServer /config/raw/${SECTION} com.appdynamic.Properties.${SECTION} ${KEY} s "${STRING}"
  }

  function airserver-get-name() {
    _airserver_read_dbus 'Device' 'name' || _airserver_read_config 'Device' 'name'
  }

  function airserver-set-name() {
    _airserver_write_dbus_string 'Device' 'name' "$*"
  }

  function airserver-build-info() {
    # check if dirty build
    local DIRTY=
    if [[ "$GIT_SHA" == *-dirty ]]; then
      DIRTY=" %F{196}dirty"
    fi

    # check if new build less than 12 hour old then time is more useful than the git sha
    local NOW=$(date +%s)
    if ((($NOW - $BUILD_DATE) < 12*60*60)); then
      local BUILD_TIME=$(date --date="@${BUILD_DATE}" '+%k:%M:%S')
      echo "%F{#c79f1c}$AIRSERVER_VERSION %F{#1cc7c1}$BUILD_TIME$DIRTY"
    else
      echo "%F{#c79f1c}$AIRSERVER_VERSION%F{reset} : %F{#bc1bc2}${GIT_SHA:s/-dirty//}$DIRTY"
    fi
  }

  PROMPT_MODEL=$(cat /sys/class/dmi/id/product_name)
  RPROMPT='%B%F{#4287f5}$(airserver-get-name)%F{reset} : $PROMPT_MODEL : $(airserver-build-info)'

  alias airserver-shell='su -l airserver'
  alias update-prezto="zsh /root/.zprezto-manager update && exec zsh"

  path+=(/usr/share/ad/tools)

  local static_tools_path=/media/data/static-tools
  path=("$static_tools_path" $path)
  if [[ "$UID == 0" ]]; then
    function update-static-tools() {
      local URL="https://download.airserver.com/static-tools/static-tools.tar.gz"
      if resolvectl domain | grep -q turninn.appdynamic.com; then
        URL="http://staging.turninn.appdynamic.com/static-tools/static-tools.tar.gz"
      fi
      curl -s "$URL" | gunzip | tar xv -C "$static_tools_path" -f -
      rehash
    }
    if [[ ! -d "$static_tools_path" ]]; then
      echo "Use update_static_tools to download static tools bundle"
      mkdir "$static_tools_path"
    fi
    function update-root-image() {
      feedback-scope _update-root-image "$@"
    }
  fi

  # fixup for old builds with broken .zprezto-manager
  if [[ -L "$HOME/prezto" ]]; then
    echo "Fixing bad prezto symlink..."
    rm -rf "$HOME/.zprezto"
    mv "$HOME/prezto" "$HOME/.zprezto"
  fi
fi

# disable annoying systemd pager
export SYSTEMD_PAGER=

